sX$d
# The matrix u is equivalent to the matrix of standardized scores, and the
# standard deviations are in the vector d
sX$u %*% t(sX$d)
# The matrix u is equivalent to the matrix of standardized scores, and the
# standard deviations are in the vector d
t(sX$d * t(sX$u))
pcob$x
# Simulate missing data
nomit <- 20
set.seed(15)
ina <- sample(seq(50), nomit)
inb <- sample(1:4, nomit, replace = T)
Xna <- X
index.na <- cbind(ina, inb)
Xna[index.na] <- NA
ina
inb
index.na
Xna
# Create an svd function to solve the optimization problem
fit_svd <- function(X, M = 1){
svdob <- svd(X)
with(svdob, u[, 1:M, drop = F] %*% (d[1:M] * t(v[, 1:M, drop = F])))
}
sX$u[,1:2, drop = F]
# Create an Xhat for the first step in the algorithm for the matrix completion
Xhat <- Xna
xbar <- colMeans(Xna, na.rm = T)
Xhat[index.na] <- xbar[inb]
# Set up measures of the progress of the iterations of the algorithm
thresh <- 1e-7
ismiss <- is.na(Xna)
mssold <- mean((scale(Xna, xbar, F))[!ismiss]^2)
mss0 <- mean(Xna[!ismiss]^2)
# Step 2 of algorithm
while(rel_err > thresh){
iter <- iter + 1
# step 2(a)
Xapp <- fit_svd(Xhat, M = 1)
# step 2(b)
Xhat[ismiss] <- Xapp[ismiss]
# step 2(c)
mss <- mean(((Xna - Xapp)[!ismiss])^2)
rel_err <- (mssold - mss) / mss0
mssold <- mss
cat("Iter:", iter, "MSS:", mss, "Rel. Err:", rel_err, "\n")
}
rel_err <- 1
iter <- 0
ismiss <- is.na(Xna)
mssold <- mean((scale(Xna, xbar, F))[!ismiss]^2)
mss0 <- mean(Xna[!ismiss]^2)
# Step 2 of algorithm
while(rel_err > thresh){
iter <- iter + 1
# step 2(a)
Xapp <- fit_svd(Xhat, M = 1)
# step 2(b)
Xhat[ismiss] <- Xapp[ismiss]
# step 2(c)
mss <- mean(((Xna - Xapp)[!ismiss])^2)
rel_err <- (mssold - mss) / mss0
mssold <- mss
cat("Iter:", iter, "MSS:", mss, "Rel. Err:", rel_err, "\n")
}
# Compute the correlation between the 20 imputed values and the actual values
cor(Xapp[ismiss], X[ismiss])
set.seed(2)
X <- matrix(rnorm(50 * 2), ncol = 2)
X
X[1:25, 1] <- X[1:25, 1] + 3
X[1:25, 2] <- X[1:25, 1] - 4
# Perform K-means clustering with k = 2
km_out <- kmeans(x, 2, nstart = 20)
# Perform K-means clustering with k = 2
km_out <- kmeans(X, 2, nstart = 20)
km_out$cluster
par(mfrow = c(1, 2))
plot(X, col = (km_out$cluster + 1),
main = "K-Means Clustering Results with K = 2",
xlab = "", ylab = "", pch = 20, cex = 2)
# plot the cluster
plot(X, col = (km_out$cluster + 1),
main = "K-Means Clustering Results with K = 2",
xlab = "", ylab = "", pch = 20, cex = 2)
# plot the cluster
plot(X, col = (km_out$cluster + 1),
main = "K-Means Clustering Results with K = 2",
xlab = "", ylab = "", pch = 20, cex = 2)
km_out$withinss
# plot the cluster
plot(X, col = (km_out$cluster + 1),
main = "K-Means Clustering Results with K = 2",
xlab = "", ylab = "", pch = 20, cex = 2)
km_out$tot.withinss
sum(km_out$withinss)
install.packages("fpc")
library(tidyverse)
library(factoextra)
library(readxl)
library(fpc)
# Import data
edu <- read_xlsx("Data/educational data.xlsx")
# Using the required columns
edu_name <- c("R101N", "R102N",
"R701CK2", "R701CK3", "R701DK2", "R701DK3", "R701EK2", "R701EK3",
"R701FK2", "R701FK3", "R701GK2", "R701GK3", "R701HK3", "R701HK3",
"R701IK2", "R701IK3", "R701JK2", "R701JK3", "R701KK3", "R701LK3",
"R703AK2", "R703AK3", "R703BK2", "R703BK3", "R703CK2", "R703CK3",
"R703DK2", "R703DK3", "R703EK2", "R703EK3", "R703FK2", "R703FK3",
"R703GK2", "R703GK3")
edu <- edu %>%
select(!!edu_name) %>%
group_by(R101N, R102N) %>%
summarise(across(everything(), sum)) %>%
as_tibble()
View(edu)
# Removing the region data
num_dat <- edu %>% select(-c(R101N, R102N))
num_dat <- scale(num_dat) # Standard scaling
set.seed(10)
dbscan_cl <- dbscan(num_dat, eps = 0.45)
dbscan_cl
dbscan_cl$cluster
dbscan_cl <- dbscan(num_dat, eps = 0.2)
dbscan_cl$cluster
dbscan_cl <- dbscan(num_dat, eps = 0.1)
dbscan_cl$cluster
dbscan_cl <- dbscan(num_dat, eps = 0.1, MinPts = 5)
dbscan_cl$cluster
dbscan_cl <- dbscan(num_dat, eps = 0.6, MinPts = 5)
dbscan_cl$cluster
num_dat
dbscan_cl$cluster
# First attempt to do K-Mean clustering
fviz_nbclust(num_dat, kmeans, method = "wss")
fviz_nbclust(num_dat, kmeans, method = "silhouette")
clust_result <- kmeans(num_dat, 2)
clust_result
edu$clust <- clust_result$cluster
View(edu)
clust1_data <- edu %>% filter(clust == 1)
clust2_data <- edu %>% filter(clust == 2)
View(clust1_data)
View(clust2_data)
fviz_cluster(clust_result, geom = "point", data = num_dat) + ggtitle("k=6")
dbscan_cl <- dbscan(num_dat, eps = 0.6, MinPts = 10)
dbscan_cl$cluster
dbscan_cl <- dbscan(num_dat, eps = 0.6, MinPts = 20)
dbscan_cl$cluster
# Applying principal component analysis
pr_num <- prcomp(num_dat, center = F)
pr_num
biplot(pr_num, scale = 0)
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.5, MinPts = 5)
dbscan_cl$cluster
plot(pr_num$x[,1], pr_num$x[,2])
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.5, MinPts = 3)
dbscan_cl$cluster
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.5, MinPts = 2)
dbscan_cl$cluster
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.2, MinPts = 5)
dbscan_cl$cluster
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.01, MinPts = 5)
dbscan_cl$cluster
dbscan_cl_pca <- dbscan(pr_num$x[,1:2], eps = 0.001, MinPts = 5)
dbscan_cl$cluster
library(tidyverse)
library(factoextra)
library(readxl)
# Import data
edu <- read_xlsx("Data/educational data.xlsx")
str(edu)
glimpse(edu)
# View the data
View(edu)
# Using the required columns
edu_col <- c("R101N", "R102N",
"R701CK2", "R701CK3", "R701DK2", "R701DK3", "R701EK2", "R701EK3",
"R701FK2", "R701FK3", "R701GK2", "R701GK3", "R701HK3", "R701HK3",
"R701IK2", "R701IK3", "R701JK2", "R701JK3", "R701KK3", "R701LK3",
"R703AK2", "R703AK3", "R703BK2", "R703BK3", "R703CK2", "R703CK3",
"R703DK2", "R703DK3", "R703EK2", "R703EK3", "R703FK2", "R703FK3",
"R703GK2", "R703GK3")
# Slicing the data for the required columns and group it by the districts/cities
edu <- edu %>%
select(!!edu_name) %>%
group_by(R101N, R102N) %>%
summarise(across(everything(), sum)) %>%
as_tibble()
# Slicing the data for the required columns and group it by the districts/cities
edu <- edu %>%
select(!!edu_col) %>%
group_by(R101N, R102N) %>%
summarise(across(everything(), sum)) %>%
as_tibble()
View(edu)
library(tidyverse)
library(factoextra)
library(readxl)
# Import data
edu <- read_xlsx("Data/educational data.xlsx")
# ================ INFORMATION ================
# All of the variable description is available in the 'variable name.xls' file.
View(read_xls('Data/variable name.xls'))
# ================ INFORMATION ================
# All of the variable description is available in the 'variable name.xls' file.
View(read_xls('Data/variable name.xls'))
# Create a vector for the required columns
edu_col <- c("R101N", "R102N",
"R701CK2", "R701CK3", "R701DK2", "R701DK3", "R701EK2", "R701EK3",
"R701FK2", "R701FK3", "R701GK2", "R701GK3", "R701HK3", "R701HK3",
"R701IK2", "R701IK3", "R701JK2", "R701JK3", "R701KK3", "R701LK3",
"R703AK2", "R703AK3", "R703BK2", "R703BK3", "R703CK2", "R703CK3",
"R703DK2", "R703DK3", "R703EK2", "R703EK3", "R703FK2", "R703FK3",
"R703GK2", "R703GK3")
# Slicing the data for the required columns and group it by the districts/cities
edu <- edu %>%
select(!!edu_col) %>%
group_by(R101N, R102N) %>%
summarise(across(everything(), sum)) %>%
as_tibble()
# Create a variable to accommodate the educational representatives
num_dat <- edu %>% select(-c(R101N, R102N))
# Standardize the data
num_dat <- scale(num_dat)
num_dat
# Visualize the data using principal component analysis for 2D graph
pr_dat <- prcomp(numdat, center = F) # We don't need to center the data because it's already centered
# Create a biplot
biplot(pr_dat, scale = 0)
# Visualize the data using principal component analysis for 2D graph
pr_dat <- prcomp(num_dat, center = F) # We don't need to center the data because it's already centered
# Create a biplot
biplot(pr_dat, scale = 0)
# Variance explained by each principal components
pr_var <- pr_dat$sdev^2
# Proportion of variance explained
pve <- pr_var / sum(pr_var)
pve
# Plot the PVE and its cummulative
par(mfrow = c(1, 2))
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained", ylim = c(0, 1),
type = "b")
plot(cumsum(pve), xlab = "Principal Component",
ylab = "Cummulative Proportion of Variance Explained",
ylim = c(0, 1), type = "b")
cumsum(pve[1:2])
cumsum(pve)
round(cumsum(pve) * 100, 2)
plot(pr_dat$x[1], pr_dat$x[2])
plot(pr_dat$x[, 1], pr_dat$x[, 2])
par(mar = c(0, 0, 0, 0))
plot(pr_dat$x[, 1], pr_dat$x[, 2])
plot(pr_dat$x[, 1], pr_dat$x[, 2])
plot(pr_dat$x[, 1], pr_dat$x[, 2],
xlab = "PC1", ylab = "PC2")
plot(pr_dat$x[, 1], pr_dat$x[, 2],
xlab = paste("PC1", pve[1]), ylab = paste("PC2", pve[2]))
plot(pr_dat$x[, 1], pr_dat$x[, 2],
xlab = paste("PC1", round(pve[1] * 100, 2)),
ylab = paste("PC2", round(pve[2] * 100, 2)))
plot(pr_dat$x[, 1], pr_dat$x[, 2],
xlab = paste0("PC1 ", "(", round(pve[1] * 100, 2), "%)"),
ylab = paste0("PC2 ", "(", round(pve[2] * 100, 2), "%)"))
# Create a biplot
biplot(pr_dat, scale = 0)
# Finding the "best" number of clusters
fviz_nbclust(num_dat, kmeans, method = "wss")
# 2.
fviz_nbclust(num_dat, kmeans, method = "silhouette")
# 2. Using silhouette technique
fviz_nbclust(num_dat, kmeans, method = "silhouette")
# Using K=2 for K-mean clustering
clust_result <- kmeans(num_dat, 2, nstart = 50)
clust_result
# Adding the clusters in the data
edu$clust <- clust_result$cluster
View(edu)
# Plot the clusters in a pca plot
fviz_cluster(clust_result, geom = "point", data = num_dat) + ggtitle("k=6")
# Plot the clusters in a pca plot
fviz_cluster(clust_result, geom = "point", data = num_dat) + ggtitle("K = 2")
# Check the first cluster
clust1_data <- edu %>% filter(clust == 1)
View(clust1_data)
nrow(clust1_data)
nrow(clust2_data) # There are 85 districts/cities in the first cluster
# Check the second cluster
clust2_data <- edu %>% filter(clust == 2)
View(clust2_data)
nrow(clust2_data) # There are 85 districts/cities in the first cluster
clust_result
library(skimr)
skim(clust1_data)
skim(clust2_data)
View(edu)
edu[1]
edu[3]
edu[2]
edu[2:]
# Create a graph to compare the two clusters characteristics for each variable
edu_plot <- edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), mean)) %>%
as_tibble()
# Create a graph to compare the two clusters characteristics for each variable
edu_plot <- edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything()), mean) %>%
as_tibble()
# Create a graph to compare the two clusters characteristics for each variable
edu_plot <- edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(mean) %>%
as_tibble()
# Create a graph to compare the two clusters characteristics for each variable
edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(sum)
# Create a graph to compare the two clusters characteristics for each variable
edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), sum))
glimpse(edu)
# Create a graph to compare the two clusters characteristics for each variable
edu$clust <- as.factor(edu$clust)
edu[2:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), sum))
glimpse(edu)
edu[2:ncol(edu)]
edu[3:ncol(edu)]
edu[3:ncol(edu)] %>%
group_by(clust) %>%
summarise(accross(everything(), mean))
edu[3:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), mean))
edu_plot <- edu[3:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), mean))
ggplot(edu_plot, aes(fill = clust, y = R701CK2, x = clust)) +
geom_bar(position = "dodge", stat = "identity")
t(edu_plot)
as_tibble(cbind(nms = names(edu_plot), t(edu_plot)))
edu_plot[1,]
edu_plot[1, 2:ncol(edu_plot)]
cluster = rbind(rep(1, ncol(edu_plot) - 1), rep(2, ncol(edu_plot) - 1))
cluster
t(cluster)
rep(1, ncol(edu_plot) - 1)
rbind(rep(1, ncol(edu_plot) - 1), 2)
cluster = rbind(t(rep(1, ncol(edu_plot) - 1)), t(rep(2, ncol(edu_plot) - 1)))
cluster
cluster = append(rep(1, ncol(edu_plot) - 1)), rep(2, ncol(edu_plot) - 1)
cluster = append(rep(1, ncol(edu_plot) - 1), rep(2, ncol(edu_plot) - 1))
cluster
ncol(edu_plot) - 1
value = edu_plot[1, 2:ncol(edu_plot)]
value
ncol(value)
var_name <- names(edu_plot)[2:ncol(edu_plot)]
var_name
as_tibble(cbind(cluster, var_name, value))
value
cluster
var_name
value <-  unlist(edu_plot[1, 2:ncol(edu_plot)])
value
value
value <-  append(unlist(edu_plot[1, 2:ncol(edu_plot)]), unlist(edu_plot[2, 2:ncol(edu_plot)]))
value
length(value)
cluster
length(cluster)
length(var_name)
var_name <- rep(names(edu_plot)[2:ncol(edu_plot)], 2)
var_name
cluster <-  append(rep(1, ncol(edu_plot) - 1), rep(2, ncol(edu_plot) - 1))
value <-  append(unlist(edu_plot[1, 2:ncol(edu_plot)]), unlist(edu_plot[2, 2:ncol(edu_plot)]))
var_name <- rep(names(edu_plot)[2:ncol(edu_plot)], 2)
as_tibble(cbind(cluster, var_name, value))
ggplot(edu_plot, aes(fill = clust, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity")
edu_plot <- as_tibble(cbind(cluster, var_name, value))
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity")
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_blank())
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_blank())
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
library(tidyverse)
library(factoextra)
library(readxl)
library(skimr)
# Import data
edu <- read_xlsx("Data/educational data.xlsx")
# Create a vector for the required columns
edu_col <- c("R101N", "R102N",
"R701CK2", "R701CK3", "R701DK2", "R701DK3", "R701EK2", "R701EK3",
"R701FK2", "R701FK3", "R701GK2", "R701GK3", "R701HK3", "R701HK3",
"R701IK2", "R701IK3", "R701JK2", "R701JK3", "R701KK3", "R701LK3",
"R703AK2", "R703AK3", "R703BK2", "R703BK3", "R703CK2", "R703CK3",
"R703DK2", "R703DK3", "R703EK2", "R703EK3", "R703FK2", "R703FK3",
"R703GK2", "R703GK3")
# Slicing the data for the required columns and group it by the districts/cities
edu <- edu %>%
select(!!edu_col) %>%
group_by(R101N, R102N) %>%
summarise(across(everything(), sum)) %>%
as_tibble()
# Create a variable to accommodate the educational representatives
num_dat <- edu %>% select(-c(R101N, R102N))
# Standardize the data
num_dat <- scale(num_dat)
# Visualize the data using principal component analysis for 2D graph
pr_dat <- prcomp(num_dat, center = F) # We don't need to center the data because it's already centered
# Using K=2 for K-mean clustering
clust_result <- kmeans(num_dat, 2, nstart = 50)
# Adding the clusters in the data
edu$clust <- clust_result$cluster
# Check the first cluster
clust1_data <- edu %>% filter(clust == 1)
# Check the second cluster
clust2_data <- edu %>% filter(clust == 2)
# Create a graph to compare the two clusters characteristics for each variable
edu$clust <- as.factor(edu$clust)
edu_plot <- edu[3:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), mean))
cluster <-  append(rep(1, ncol(edu_plot) - 1), rep(2, ncol(edu_plot) - 1))
value <-  append(unlist(edu_plot[1, 2:ncol(edu_plot)]), unlist(edu_plot[2, 2:ncol(edu_plot)]))
var_name <- rep(names(edu_plot)[2:ncol(edu_plot)], 2)
edu_plot <- as_tibble(cbind(cluster, var_name, value))
# Create a horizontal bar chart to visualize the different
unlist(edu_plot[1, 2:ncol(edu_plot)]) - unlist(edu_plot[2, 2:ncol(edu_plot)])
unlist(edu_plot[1, 2:ncol(edu_plot)])
edu_plot <- edu[3:ncol(edu)] %>%
group_by(clust) %>%
summarise(across(everything(), mean))
# Create a horizontal bar chart to visualize the different
unlist(edu_plot[1, 2:ncol(edu_plot)]) - unlist(edu_plot[2, 2:ncol(edu_plot)])
# Create a horizontal bar chart to visualize the different
(unlist(edu_plot[1, 2:ncol(edu_plot)]) - unlist(edu_plot[2, 2:ncol(edu_plot)])) / unlist(edu_plot[1, 2:ncol(edu_plot)])
# Create a horizontal bar chart to visualize the different
round((unlist(edu_plot[1, 2:ncol(edu_plot)]) - unlist(edu_plot[2, 2:ncol(edu_plot)])) / unlist(edu_plot[1, 2:ncol(edu_plot)]), 2)
# Create a horizontal bar chart to visualize the different
difference = round((unlist(edu_plot[1, 2:ncol(edu_plot)]) - unlist(edu_plot[2, 2:ncol(edu_plot)])) / unlist(edu_plot[1, 2:ncol(edu_plot)]), 2)
difference
names(difference)
diff_plot <- as_tibble(cbind(var_name = names(difference),
difference))
diff_plot
ggplot(diff_plot, aes(y = difference, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
coord_flip()
plus1_formatter <- function(x) {x +1}
ggplot(diff_plot, aes(y = difference, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
scale_y_continuous(labels=plus1_formatter) +
coord_flip()
set.seed(1)
df <- data.frame(category = letters[1:10], difference = rnorm(10))
g <- ggplot(data = df, aes(y = difference, x = category, fill = difference < 0)) +
geom_col() +
coord_flip()
print(g)
ggplot(diff_plot, aes(y = difference, x = var_name)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels=plus1_formatter) +
coord_flip()
ggplot(diff_plot, aes(y = difference, x = var_name)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(diff_plot, aes(y = difference, x = var_name)) +
geom_col() +
coord_flip()
ggplot(diff_plot, aes(y = difference, x = var_name, fill = difference < 0)) +
geom_col() +
coord_flip()
df
diff_plot
diff_plot$difference <- as.numeric(diff_plot$difference)
ggplot(diff_plot, aes(y = difference, x = var_name, fill = difference < 0)) +
geom_col() +
coord_flip()
ggplot(diff_plot, aes(y = difference, x = var_name, fill = difference > 0)) +
geom_col() +
coord_flip()
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
edu_plot <- as_tibble(cbind(cluster, var_name, value))
ggplot(edu_plot, aes(fill = cluster, y = value, x = var_name)) +
geom_bar(position = "dodge", stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.text.y = element_blank(), axis.ticks.y = element_blank())
ggplot(diff_plot, aes(y = difference, x = var_name, fill = difference > 0)) +
geom_col() +
coord_flip()
